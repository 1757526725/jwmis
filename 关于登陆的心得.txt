2017年3月3日
之前因为正则表达式使用方法不对导致项目一直没有继续开发，今天本来准备不做这方面的东西了，看看只提交用户名和密码是否可以，但是很遗憾的是我抓包的时候发现不仅提交的的时候用的并不是诸如username这样的名称，而且并没有提交密码。然后我随便在github上查了一下发现有些数据是必须提交的，所以我从新开始着手学起了QT的正则使用方法，这次总算是会用了，不过出现的结果中，没有出现那两个数据（我只匹配了有value值的input），也就是说我需要自己去组织相关的信息。在那篇帖子中写的是有一个数据是固定的，有一个数据是随机的，显然他也不知道数据的出处，仅仅只是抓包。我通过开发人员工具监控着dom的变化试图去找这几个数的来源，我发现这两项一直是空着的，当我输入密码的时候其中一个之会变化，另外一个不会变动，并且是每一个字符输入都会变化一次，而输入验证码的时候这两项的表现反过来了，所以就是说，这两项就是对应的加密后的密码和验证码。由于那个人一直使用的自己的账号测试，所以密码不变，而验证码肯定是每次都会变化的，所以他认为是随机的，但其实就是他输入的验证码而已。既然他的密码加密后不变，那就没有拼接其他的随机字符串，应该是直接加密，即使拼接也是固定的字符串。数了下长度是30位，暂时还不知道是什么加密方式，不过嘛，我们可以继续跟踪，然后发现调用了这么两个个函数，很明显，分别对应密码和字符串，从这里我们就可以知道密码是怎么来的了——以密码为例学号（用户名），MD5后取大写后前30位的密码，然后拼接了“1134”这个字符串，拼接完后再MD5取前30位。
function chkpwd(obj) {  if(obj.value!='')  {    var s=md5(document.all.txt_asmcdefsddsd.value+md5(obj.value).substring(0,30).toUpperCase()+'11342').substring(0,30).toUpperCase();   document.all.dsdsdsdsdxcxdfgfg.value=s;} else { document.all.dsdsdsdsdxcxdfgfg.value=obj.value;} }  function chkyzm(obj) {  if(obj.value!='') {   var s=md5(md5(obj.value.toUpperCase()).substring(0,30).toUpperCase()+'11342').substring(0,30).toUpperCase();   document.all.fgfggfdgtyuuyyuuckjg.value=s;} else {    document.all.fgfggfdgtyuuyyuuckjg.value=obj.value.toUpperCase();}}
我用我比较擅长一点，同时可以不用等待编译的php写着试了一下，结果果然是对的
strtoupper($username.substr(md5(strtoupper(substr(md5($pass),0,30)).'11342'),0,30));
好了这下算是解决了登陆的大问题，有空再继续完成登陆的功能，以后还有刷新所有课程余课情况（避免点开一些已经没有了的课程，或者错过比较想去但是认为可能抢完的课），至于抢课，我之前看过一眼数据包，一时半会估计解不开，而且抢课的时候那么急，我还是不要做一些不必要的测试为好（不过可以顺便抓包以供以后分析）。